# interpreter for shell commands
set shell sh

# set variables
set mouse true
set icons true

# set image previewer
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(mimetype -Lb $f) in
        text/*|application/json|application/x-desktop|application/x-shellscript|application/yaml|application/xml|inode/x-empty) lf -remote "send $id \$$EDITOR \$fx";;
        application/octet-stream) lf -remote "send $id \$$VIDEO_PLAYER \$fx";;
        *) for f in $fx; do $OPENER $f &> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# define a custom 'delete' command
cmd delete ${{
    clear; tput cup 0 0; tput bold
    set -f
    printf "$fx\n"
    printf "delete?[y/N]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    clear; tput cup 0 0; tput bold
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    clear; tput cup 0 0; tput bold
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    clear; tput cup 0 0; tput bold
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# yank the name of the current file into system clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

# key bindings
map E extract
map Z zip

map <enter> shell

map x $$f
map X !$f

map o &mimeopen --no-ask $f
map O $mimeopen --ask $f

map <delete> delete
map D trash

map r clear

map i rename                             # cursor at the extension (default)
map I :rename; cmd-home                  # cursor at the beginning
map A :rename; cmd-end                   # cursor at the end
map c :rename; cmd-delete-home           # portion before the extension deleted
map C :rename; cmd-end; cmd-delete-home  # entire filename deleted

map <c-n> push :mkdir<space>

map V push :!nvim<space>

map <c-c> :yank-basename
